reset;

model DCOPF.mod;
data DCOPF.dat;


option solver Gurobi;


solve;

param load_shed{n in ZONES};
let {n in ZONES} load_shed[n] := sum{t in TIME_PERIODS}  Curtailment[t,n];
	  

param total_demand;
let total_demand := sum{t in TIME_PERIODS,n in ZONES} fixed_demand[t,n];

display total_cost;
display total_cost/total_demand;
display capacity_installed_stor;
display capacity_installed_gen;
display load_shed;

param max_flow{LINES};
let {l in LINES} max_flow[l] := max{t in TIME_PERIODS} flow[l,t];

param min_flow{LINES};
let {l in LINES} min_flow[l] := min{t in TIME_PERIODS} flow[l,t];

display min_flow, max_flow;



# Post-Processing Analysis for Identifying Transmission Bottlenecks

# 1. Add shadow price reporting to your DCOPF model
# Add these to your AMPL model file:

# For line capacity constraints (positive direction)
param shadow_price_pos{l in LINES, t in TIME_PERIODS};
let {l in LINES, t in TIME_PERIODS} shadow_price_pos[l,t] := LineCapacityPos[l,t].dual;

# For line capacity constraints (negative direction)
param shadow_price_neg{l in LINES, t in TIME_PERIODS};
let {l in LINES, t in TIME_PERIODS} shadow_price_neg[l,t] := LineCapacityNeg[l,t].dual;

# Calculate total congestion hours per line
param congestion_hours{l in LINES};
let {l in LINES} congestion_hours[l] := sum{t in TIME_PERIODS} 
    if (shadow_price_pos[l,t] > 0.001 || shadow_price_neg[l,t] > 0.001) then 1 else 0;

# Calculate congestion cost per line
param congestion_cost{l in LINES};
let {l in LINES} congestion_cost[l] := sum{t in TIME_PERIODS} 
    (shadow_price_pos[l,t] + shadow_price_neg[l,t]) * line_capacity[l];

# 2. Calculate line utilization metrics
param max_utilization{l in LINES};
let {l in LINES} max_utilization[l] := max{t in TIME_PERIODS} abs(flow[l,t]) / line_capacity[l];

param avg_utilization{l in LINES};
let {l in LINES} avg_utilization[l] := (sum{t in TIME_PERIODS} abs(flow[l,t])) / 
    (card(TIME_PERIODS) * line_capacity[l]);

# 3. Calculate Price Difference Across Lines
param price_diff{l in LINES, t in TIME_PERIODS};
let {l in LINES, t in TIME_PERIODS} price_diff[l,t] := 
    abs(NodeBalance[t,line_from[l]].dual - NodeBalance[t,line_to[l]].dual);

param avg_price_diff{l in LINES};
let {l in LINES} avg_price_diff[l] := (sum{t in TIME_PERIODS} price_diff[l,t]) / card(TIME_PERIODS);

# 4. Display bottleneck analysis
printf "=== TRANSMISSION BOTTLENECK ANALYSIS ===\n\n";
printf "Line\tCong. Hours\tCong. Cost\tMax Util.\tAvg Util.\tAvg Price Diff.\n";
printf {l in LINES} "%s\t%d\t%.2f\t%.2f%%\t%.2f%%\t%.2f\n", 
    l, congestion_hours[l], congestion_cost[l], 
    max_utilization[l]*100, avg_utilization[l]*100, avg_price_diff[l];

# 5. Calculate Flow Direction Frequency
param flow_pos_freq{l in LINES};
let {l in LINES} flow_pos_freq[l] := (sum{t in TIME_PERIODS} if flow[l,t] > 0 then 1 else 0) / 
    card(TIME_PERIODS);

param flow_neg_freq{l in LINES};
let {l in LINES} flow_neg_freq[l] := (sum{t in TIME_PERIODS} if flow[l,t] < 0 then 1 else 0) / 
    card(TIME_PERIODS);

# 6. Find Most Congested Hours
param top_congested_hours{1..5};
let {i in 1..5} top_congested_hours[i] := 0;

param total_congestion{t in TIME_PERIODS};
let {t in TIME_PERIODS} total_congestion[t] := sum{l in LINES} 
    if (shadow_price_pos[l,t] > 0.001 || shadow_price_neg[l,t] > 0.001) then 1 else 0;

# IMPORTANT: This part would be implemented in a more sophisticated way in practice,
# as AMPL doesn't have a direct "top-N" sorting capability in the modeling language.
# In practice, you would export the data and process it in a script.

# 7. Export detailed results for further analysis
# Display commands to help create output files for further analysis in Python/R
printf "\nTo export detailed congestion data for further analysis:\n";
printf "1. Run: display {l in LINES, t in TIME_PERIODS: shadow_price_pos[l,t] > 0.001 || shadow_price_neg[l,t] > 0.001} (l,t,flow[l,t],line_capacity[l]) > congestion_details.txt\n";
printf "2. Run: display {l in LINES} (l,congestion_hours[l],congestion_cost[l],max_utilization[l]) > bottleneck_summary.txt\n";


##########################################
##########################################
##########################################
##########################################
##########################################
##########################################


reset;

model transport.mod;
data transport.dat;


option solver Gurobi;


solve;

param load_shed{n in ZONES};
let {n in ZONES} load_shed[n] := sum{t in TIME_PERIODS}  Curtailment[t,n];
	  

param total_demand;
let total_demand := sum{t in TIME_PERIODS,n in ZONES} fixed_demand[t,n];

display total_cost;
display total_cost/total_demand;
display capacity_installed_stor;
display capacity_installed_ger;
display load_shed;


param max_flow{LINES};
let {l in LINES} max_flow[l] := max{t in TIME_PERIODS} flow[l,t];

param min_flow{LINES};
let {l in LINES} min_flow[l] := min{t in TIME_PERIODS} flow[l,t];

display min_flow, max_flow;
